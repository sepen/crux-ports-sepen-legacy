/* Support files for GNU libc.  Files in the system namespace go here.
   Files in the C namespace (ie those that do not start with an
   underscore) go in .c.  */

//#include <_ansi.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/fcntl.h>
#include <stdio.h>
#include <time.h>
#include <sys/time.h>
#include <sys/times.h>
#include <errno.h>
//#include <reent.h>
//#include "swi.h"

/* Forward prototypes.  */
int     _system     _PARAMS ((const char *));
int     _rename     _PARAMS ((const char *, const char *));
int     isatty		_PARAMS ((int));
clock_t _times		_PARAMS ((struct tms *));
int     _gettimeofday	_PARAMS ((struct timeval *, struct timezone *));
void    _raise 		_PARAMS ((void));
int     _unlink		_PARAMS ((void));
int     _link 		_PARAMS ((void));
int     _stat 		_PARAMS ((const char *, struct stat *));
int     _fstat 		_PARAMS ((int, struct stat *));
caddr_t _sbrk		_PARAMS ((int));
int     _getpid		_PARAMS ((int));
int     _kill		_PARAMS ((int, int));
void    _exit		_PARAMS ((int));
int     _close		_PARAMS ((int));
int     _swiclose	_PARAMS ((int));
int     _open		_PARAMS ((const char *, int, ...));
int     _swiopen	_PARAMS ((const char *, int));
int     _write 		_PARAMS ((int, char *, int));
int     _swiwrite	_PARAMS ((int, char *, int));
int     _lseek		_PARAMS ((int, int, int));
int     _swilseek	_PARAMS ((int, int, int));
int     _read		_PARAMS ((int, char *, int));
int     _swiread	_PARAMS ((int, char *, int));
void    initialise_monitor_handles _PARAMS ((void));

static int	wrap		_PARAMS ((int));
static int	error		_PARAMS ((int));
static int	get_errno	_PARAMS ((void));
static int	remap_handle	_PARAMS ((int));
static int	do_AngelSWI	_PARAMS ((int, void *));
static int 	findslot	_PARAMS ((int));

/* Register name faking - works in collusion with the linker.  */
register char * stack_ptr asm ("sp");


/* following is copied from libc/stdio/local.h to check std streams */
extern void   _EXFUN(__sinit,(struct _reent *));
#define CHECK_INIT(fp) \
  do                                    \
    {                                   \
      if ((fp)->_data == 0)             \
        (fp)->_data = _REENT;           \
      if (!(fp)->_data->__sdidinit)     \
        __sinit ((fp)->_data);          \
    }                                   \
  while (0)

/* Adjust our internal handles to stay away from std* handles.  */
#define FILE_HANDLE_OFFSET (0x20)

static int std_files_checked;
static int monitor_stdin;
static int monitor_stdout;
static int monitor_stderr;

/* Struct used to keep track of the file position, just so we
   can implement fseek(fh,x,SEEK_CUR).  */
typedef struct
{
  int handle;
  int pos;
}
poslog;

#define MAX_OPEN_FILES 20
static poslog openfiles [MAX_OPEN_FILES];

static int
findslot (int fh)
{
  return -1;
}


/* Function to convert std(in|out|err) handles to internal versions.  */
static int
remap_handle (int fh)
{
	return 0;
}

void
initialise_monitor_handles (void)
{
}

static int
get_errno (void)
{
	return 0;
}

static int
error (int result)
{
  errno = get_errno ();
  return result;
}

static int
wrap (int result)
{
  if (result == -1)
    return error (-1);
  return result;
}

/* Returns # chars not! written.  */
int
_swiread (int file,
	  char * ptr,
	  int len)
{
	return -1;
}

int
_read (int file,
       char * ptr,
       int len)
{
  return -1;
}

int
_swilseek (int file,
	   int ptr,
	   int dir)
{
  return -1;
}

int
_lseek (int file,
	int ptr,
	int dir)
{
  return wrap (_swilseek (file, ptr, dir));
}

/* Returns #chars not! written.  */
int
_swiwrite (
	   int    file,
	   char * ptr,
	   int    len)
{
	return -1;
}

int
_write (int    file,
	char * ptr,
	int    len)
{
  return -1;
}

extern int strlen (const char *);

int
_swiopen (const char * path,
	  int          flags)
{
  return -1;
}

int
_open (const char * path,
       int          flags,
       ...)
{
  return wrap (_swiopen (path, flags));
}

int
_swiclose (int file)
{
	return -1;	
}

int
_close (int file)
{
  return wrap (_swiclose (file));
}

void
_exit (int n)
{
}

int
_kill (int n, int m)
{
	return -1;
}

int
_getpid (int n)
{
  return 1;
  n = n;
}

//
// JiK patches..
//

char *fake_heap_end = (void *)0;
char *fake_stack_ptr = (void *)0;
int fake_allow_sdk = 0;


//
//
//

caddr_t _sbrk (int incr) {
	extern char   end asm ("end");	/* Defined by the linker.  */
	static char * heap_end;
	char *        prev_heap_end = (caddr_t)-1;

	if (!fake_allow_sdk && fake_stack_ptr == NULL) {
		if (heap_end == NULL) {
			heap_end = & end;
  		}

		prev_heap_end = heap_end;
  
		if (heap_end + incr > stack_ptr) {
			/* Some of the libstdc++-v3 tests rely upon detecting
			   out of memory errors, so do not abort here.  */
			errno = ENOMEM;
			return (caddr_t) -1;
		}
  
		heap_end += incr;
	}
	if (fake_stack_ptr) {
		//volatile long *pal = (long *)0x14a00400;

		prev_heap_end = fake_heap_end;
		//*pal = (long)fake_heap_end;
  
		if (fake_heap_end + incr > fake_stack_ptr) {
			/* Some of the libstdc++-v3 tests rely upon detecting
			   out of memory errors, so do not abort here.  */
			errno = ENOMEM;
			return (caddr_t) -1;
		}
  
		fake_heap_end += incr;
	}
	return (caddr_t) prev_heap_end;
}

extern void memset (struct stat *, int, unsigned int);

int
_fstat (int file, struct stat * st)
{
  memset (st, 0, sizeof (* st));
  st->st_mode = S_IFCHR;
  st->st_blksize = 1024;
  return 0;
  file = file;
}

int _stat (const char *fname, struct stat *st)
{
  int file;

  /* The best we can do is try to open the file readonly.  If it exists,
     then we can guess a few things about it.  */
  if ((file = _open (fname, O_RDONLY)) < 0)
    return -1;

  memset (st, 0, sizeof (* st));
  st->st_mode = S_IFREG | S_IREAD;
  st->st_blksize = 1024;
  _swiclose (file); /* Not interested in the error.  */
  return 0;
}

int
_link (void)
{
  return -1;
}

int
_unlink (void)
{
  return -1;
}

void
_raise (void)
{
  return;
}

int
_gettimeofday (struct timeval * tp, struct timezone * tzp)
{
  return -1;
}

/* Return a clock that ticks at 100Hz.  */
clock_t 
_times (struct tms * tp)
{
  return -1;
};


int
isatty (int fd)
{
  return 1;
  fd = fd;
}

int
_system (const char *s)
{
  if (s == NULL)
    return 0;
  errno = ENOSYS;
  return -1;
}

int
_rename (const char * oldpath, const char * newpath)
{
  errno = ENOSYS;
  return -1;
}
